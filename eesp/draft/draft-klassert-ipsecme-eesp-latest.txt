



IPSECME Working Group                                        S. Klassert
Internet-Draft                                                   secunet
Intended status: Standards Track                                C. Hopps
Expires: 20 March 2025                           LabN Consulting, L.L.C.
                                                               A. Antony
                                                                 secunet
                                                       16 September 2024


             Enhanced Encapsulating Security Payload (EESP)
                     draft-klassert-ipsecme-eesp-00

Abstract

   This document describes the Enhanced Encapsulating Security Payload
   (EESP) protocol, which builds on the Encapsulating Security Payload
   (ESP) [RFC4303].  It is designed to overcome limitations of the ESP
   protocol to expose inner flow information to the network in a
   transparent way.  To do so, it adapts IPv6 Extension header options
   to EESP where flow identifiers can be stored.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 March 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components



Klassert, et al.          Expires 20 March 2025                 [Page 1]

Internet-Draft                    EESP                    September 2024


   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Protocol Definition . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  EESP packet format  . . . . . . . . . . . . . . . . . . .   4
     2.2.  Base Header . . . . . . . . . . . . . . . . . . . . . . .   8
       2.2.1.  Fixed Base Header . . . . . . . . . . . . . . . . . .   9
       2.2.2.  Base Header Options . . . . . . . . . . . . . . . . .   9
       2.2.3.  Host Header . . . . . . . . . . . . . . . . . . . . .  11
       2.2.4.  Sequence Number . . . . . . . . . . . . . . . . . . .  11
       2.2.5.  Initialization Vector . . . . . . . . . . . . . . . .  12
     2.3.  Payload Info Header . . . . . . . . . . . . . . . . . . .  12
       2.3.1.  Next Header . . . . . . . . . . . . . . . . . . . . .  12
       2.3.2.  Pad Length  . . . . . . . . . . . . . . . . . . . . .  13
     2.4.  Padding (for Encryption)  . . . . . . . . . . . . . . . .  13
     2.5.  Integrity Check Value (ICV) . . . . . . . . . . . . . . .  13
   3.  UDP Encapsulation . . . . . . . . . . . . . . . . . . . . . .  13
   4.  Enhanced Encapsulating Security Protocol Processing . . . . .  13
   5.  EESP Option Types . . . . . . . . . . . . . . . . . . . . . .  13
     5.1.  EESP Flow Identifier Option . . . . . . . . . . . . . . .  13
     5.2.  EESP Crypt Offset Option  . . . . . . . . . . . . . . . .  14
   6.  IKEv2 Negotiation . . . . . . . . . . . . . . . . . . . . . .  15
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  15
     7.1.  IP Protocol Number  . . . . . . . . . . . . . . . . . . .  15
     7.2.  EESP Protocol Number  . . . . . . . . . . . . . . . . . .  15
     7.3.  EESP Options Registry . . . . . . . . . . . . . . . . . .  15
   8.  Implementation Status . . . . . . . . . . . . . . . . . . . .  16
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  16
   10. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  16
   11. Normative References  . . . . . . . . . . . . . . . . . . . .  16
   12. Informative References  . . . . . . . . . . . . . . . . . . .  17
   Appendix A.  Additional Stuff . . . . . . . . . . . . . . . . . .  18
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   Due to the absence of a version number in the ESP protocol, in the
   packet header, ESP can't be updated in a transparent way.  Any
   updates to ESP must be negotiated by IKEv2 and for that,
   indiscernible to intermediate devices such as routers and firewalls.
   In the recent past, several attempts were taken to introduce a Flow
   Identifier for certain use-cases.  Examples are



Klassert, et al.          Expires 20 March 2025                 [Page 2]

Internet-Draft                    EESP                    September 2024


   [I-D.ponchon-ipsecme-anti-replay-subspaces] and
   [I-D.he-ipsecme-vpn-shared-ipsecsa].  Such a Flow Identifier could
   also be used to perform ECMP based on the inner flows at intermediate
   devices or endpoints.  dditionally to that, there exists a
   specification of the [PSP] protocol that has the need of a Flow
   Identifier, called Network Identifier (VNI) there.  PSP also defines
   a Crypto Offset to expose parts of the headers of the inner packet.
   EESP provides a solution for all the aforementioned use-cases.

   This document defines Options for the PSP usecase.  Future documents
   can define the meaning of additional Options for their particular
   use-case.  With this, all existing and potential new use-cases for
   Flow Identifiers can be covered.  For instance it can be used for the
   case of [I-D.ponchon-ipsecme-anti-replay-subspaces] or
   [I-D.he-ipsecme-vpn-shared-ipsecsa] etc., or combinations thereof.
   EESP does not have a trailer as ESP had, instead the Next Header an
   Pad Length values are moved to the EESP header.  Additionally, an
   Optimized EESP header is defined which eliminates these 2 values when
   using simple IPv4 or IPv6 tunnel mode.  EESP also does not define TFC
   padding, IP-TFS SHOULD be used instead.  A detailed discussion about
   the problems of the ESP protocol can be found in
   [I-D.mrossberg-ipsecme-multiple-sequence-counters].

   EESP follows the Security Architecture for the Internet Protocol
   [RFC4301] and uses ESP as of [RFC4303] as reference.  That means this
   document is seen as an modern version of ESP (with new protocol
   number), it follows the design principles of ESP.  Protocol parts
   that are not mentioned here, MUST be handled exactly the way as
   specified in [RFC4303].  EESP neither updates nor obsoletes
   [RFC4303].

   Though this document specifies IKEv2 as a negotiation protocol, EESP
   may use other protocols for negotiation and key derivation.  The
   packet specification is portable to other key protocol use cases,
   such as [PSP], and offers versioning at the packet level.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2.  Terminology

   This document uses the following terms defined in IKEv2 [RFC7296]:
   Child SA, CREATE_CHILD_SA, IKE_AUTH exchange, USE_TRANSPORT_MODE





Klassert, et al.          Expires 20 March 2025                 [Page 3]

Internet-Draft                    EESP                    September 2024


   This document uses the following terms defined in [PSP]: PSP (a
   recursive acronym for PSP Security Protocol), Network Identifier
   (VNI), Crypt Offset.

   This document uses the following terms defined in [RFC5840]: Wrapped
   Encapsulating Security Payload (WESP), USE_WESP_MODE.

   This document uses the following terms defined in [RFC2992]: Equal-
   cost multi-path (ECMP)

   This document uses the following terms defined in [RFC4303]:
   Encapsulating Security Payload (ESP).

   This document uses the following terms defined in
   [I-D.mrossberg-ipsecme-multiple-sequence-counters]: Sub-Child SA.

2.  Protocol Definition

   In this section we define the exact protocol formats and operations.
   This section is normative.

2.1.  EESP packet format

   The (outer) protocol header (IPv4, IPv6, or Extension) that
   immediately precedes the ESP header SHALL contain the value TBD in
   its Protocol (IPv4) or Next Header (IPv6, Extension) field (see IANA
   web page at http://www.iana.org/assignments/protocol-numbers).
   Figure 1 illustrates the top-level format of an EESP packet.  The
   EESP header is split into multiple parts.






















Klassert, et al.          Expires 20 March 2025                 [Page 4]

Internet-Draft                    EESP                    September 2024


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~                      Base Header                              ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~                      Options (variable)                       ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                     Host Header (variable)                    ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Payload Info Header                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Payload Data (variable)                  |
   ~                                                               ~
   |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |          Padding (0-255 bytes)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~              Integrity Check Value-ICV (variable)             ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                Figure 1: Top-Level Format of an EESP Packet

   The packet starts with a Base Header that is used by protocol parsing
   engines of middleboxes such as routers or firewalls and the IPsec end
   host.  The Base Header consists of a 8-bytes that are always present
   and an optional part directly following this field.  The base header
   essentially defines the total length of the EESP header and the
   length of potential present options as well as the EESP version
   number.  The optional part of the Base Header defines Options to
   store additional information, like integrity protected flow
   identifiers that can be used for flow classification.

   Base Header consists of a 6-byte, two bytes Session ID and 4 bytes
   Security Parameters Index (SPI).

   The Host Header follows the Base Header and, possible Options.  It is
   used to route the packet to the correct Crypto context and for replay
   protection.

   Unlike ESP, EESP does not have a trailer.  Instead, these values have
   moved to a Payload Info Header directly following the Host Header.
   Additionally, when IPv4 or IPv6 tunnel mode is used an the Payload



Klassert, et al.          Expires 20 March 2025                 [Page 5]

Internet-Draft                    EESP                    September 2024


   Info Header MAY be elided.  In this tunnel mode the inner packet will
   always start with an IPv4 or IPv6 header.  IPv4 or IPv6 packets
   always start with a Version field at the first nibble.  So it is
   possible to identify IPv4 and IPv6 by reading the first nibble of the
   inner packet. and there is no need for a Next Header field.
   Additionally, IPv4 and IPv6 also have a field describing the overall
   size of the inner packet, so a pad length fields is also not needed
   for tunnel mode as it can be derived.

   The Payload Data follows these header fields, and has substructure
   that depends on the choice of encryption algorithm and mode.
   Following the Payload Data is variable cipher block padding and the
   optional Integrity Check Value (ICV) field that completes the packet.

   Figure 2 illustrates the resulting packet format for IPv4 or IPv6
   Tunnel Mode and Figure 3 in all other modes of operation.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1|  Version    |    OptLen     |            Session ID +       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                              SPI                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                             Options                           ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Sequence Number (optional)                 |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          IV* (optional)                       |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               ~
   ~                     IPv4/IPv6 Header                          ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   L4 Payload Data (variable)                  |
   ~                                                               ~
   |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |          Padding (0-255 bytes)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~              Integrity Check Value-ICV (variable)             ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                   Figure 2: Optimized EESP packet format



Klassert, et al.          Expires 20 March 2025                 [Page 6]

Internet-Draft                    EESP                    September 2024


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |0|  Version    |    OptLen     |            Session ID +       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                              SPI                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~                             Options                           ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Sequence Number (optional)                 |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          IV* (optional)                       |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  0x0  |        Reserved       | Next Header   | Pad Length    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   L4 Payload Data (variable)                  |
   ~                                                               ~
   |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |          Padding (0-255 bytes)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   ~              Integrity Check Value-ICV (variable)             ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 3: Full EESP packet format

   [*] If included, cryptographic synchronization data, e.g., an
   Initialization Vector (IV), usually is not encrypted per se, although
   it often is referred to as being part of the ciphertext.  Unlike ESP,
   the IV is not considered to be a part of the payload data in EESP.

   If a combined algorithm mode is employed, the explicit ICV shown in
   Table 1 may be omitted.  Because algorithms, modes and options are
   fixed when an SA is established, the detailed format of ESP packets
   for a given SA (including the Payload Data substructure) is fixed,
   for all traffic on the SA.

   The tables below refer to the fields in the preceding figures and
   illustrate how several categories of algorithmic options, each with a
   different processing model, affect the fields noted above.  The
   processing details are described in later sections.





Klassert, et al.          Expires 20 March 2025                 [Page 7]

Internet-Draft                    EESP                    September 2024


    +==============+============+========+=========+========+========+
    | Field        | # of bytes | Requ'd | Encrypt | Integ  |  Tx'd  |
    |              |            |  [1]   |  Covers | Covers |        |
    +==============+============+========+=========+========+========+
    | Base         |     8      |   M    |         |   Y    | plain  |
    | Header(+SPI) |            |        |         |        |        |
    +--------------+------------+--------+---------+--------+--------+
    | Options      |  variable  |   O    |         |   Y    | plain  |
    +--------------+------------+--------+---------+--------+--------+
    | Seq Number   |     8      |   O    |         |   Y    | plain  |
    +--------------+------------+--------+---------+--------+--------+
    | IV           |  variable  |   O    |         |   Y    | plain  |
    +--------------+------------+--------+---------+--------+--------+
    | Payload Info |     4      |   O    |    Y    |   Y    | cipher |
    | Header [5]   |            |        |         |        |  [3]   |
    +--------------+------------+--------+---------+--------+--------+
    | IP datagram  |  variable  | M or D |    Y    |   Y    | cipher |
    | [2]          |            |        |         |        |  [3]   |
    +--------------+------------+--------+---------+--------+--------+
    | Padding      |   0-255    |   M    |    Y    |   Y    | cipher |
    |              |            |        |         |        |  [3]   |
    +--------------+------------+--------+---------+--------+--------+
    | ICV Padding  |  variable  |   if   |         |   Y    |  not   |
    |              |            |  need  |         |        |  xmtd  |
    +--------------+------------+--------+---------+--------+--------+
    | ICV          |  variable  | M [4]  |         |        | plain  |
    +--------------+------------+--------+---------+--------+--------+

          Table 1: Separate Encryption and Integrity Algorithms

   *  [1] M = mandatory; O = optional; D = dummy
   *  [2] If tunnel mode -> IP datagram.  If beet mode -> IP datagram.
      If transport mode -> next header and data
   *  [3] ciphertext if encryption has been selected
   *  [4] Mandatory if a separate integrity algorithm is used
   *  [5] Not present in Optimized Header otherwise mandatory

   The following subsections describe the fields in the header format.
   "Optional" means that the field is omitted if the option is not
   selected, i.e., it is present in neither the packet as transmitted
   nor as formatted for computation of an ICV.  Whether or not an option
   is selected is determined as part of Security Association (SA)
   establishment.  Thus, the format of EESP packets for a given SA is
   fixed, for the duration of the SA.  In contrast, "mandatory" fields
   are always present in the EESP packet format, for all SAs.

2.2.  Base Header




Klassert, et al.          Expires 20 March 2025                 [Page 8]

Internet-Draft                    EESP                    September 2024


2.2.1.  Fixed Base Header

   *  Version - 7 bits: MUST be sent to zero and checked by the
      receiver.

   If the version is different than an expected version number (e.g.,
   negotiated via the control channel), then the packet MUST be dropped
   by the receiver.  Future modifications to the EESP header require a
   new version number.  In particular, the version of EESP defined in
   this document does not allow for any extensions.  Intermediate nodes
   dealing with unknown versions are not necessarily able to parse the
   packet correctly.  Intermediate treatment of such packets is policy
   dependent (e.g., it may dictate dropping such packets).

   *  OptLen - 8 bits: Overall length of the Options following the fixed
      Baseheader in bytes.  For the intermediate routers to parse
      options.

   *  Session ID - 16 bit: The Session ID covers additional information
      that might be needed to route the packet to the correct inline
      crypto context.  For instance, if a KDF is used do stateless key
      derivation, the crypto algorithm ID could be encoded there.  The
      meaning of that field is opaque and MAY be negotiated by IKEv2.
      This combined with following 32bits Security Parameter Index (SPI)
      is the

2.2.2.  Base Header Options

   EESP options carry a variable number of "options" that are type-
   length- value (TLV) encoded in the similar format as done in
   [RFC8200] Section 4.2 for IPv6 extension headers.  This document
   defines three different option classes, Padding Options, Flow
   Identifier Options and Private Options.

   Padding Options MUST be used to align the start of the next header to
   the natural alignment of the protocol, i.e. 4 byte for IPv4 and 8
   byte for IPv6.  Other padding, like padding for cipher text
   alignment, is out of the scope of this document.  Future documents
   can define this by using the existing padding options.  Additional
   padding MUST be negotiated by IKEv2 or any other suitable protocol.

   Flow Identifier Options MUST carry characteristic information of the
   inner flow, i.e. MUST NOT change on per packet basis.  It MUST be
   negotiated by IKEv2 or any other suitable protocol.  The detailed
   specification of Flow Identifiers MUST be provided in subsequent
   documents.  These Options are opaque to intermediate devices;
   however, intermediate routers MAY use it for identifying flows for
   ECMP or similar purposes. e.g.  Sub-Child SAs, in



Klassert, et al.          Expires 20 March 2025                 [Page 9]

Internet-Draft                    EESP                    September 2024


   [I-D.mrossberg-ipsecme-multiple-sequence-counters]could be encoded
   here.  Flow Identifiers MUST have the format of Options as defind in
   Section 2.2.2.1.

   Private Options comming from a reserved Option Type Range and can be
   used for any purposes that are out of scope for standardization.  For
   example it can be used to encode hardware specific information, such
   as used encryption/authentication algorithms as done in [PSP].

   The only EESP Option Types defined in this document are the Pad1 and
   PadN options specified in Section 2.2.2.1.

2.2.2.1.  Adapting IPv6 Extension header options

   EESP extension header Options are adapted from IPv6 extension header
   Options as defined in Section 4.2 of [RFC8200], with the following
   modifications:

   *  References to the IPv6 header are removed.

   *  The two highest-order bits of the Option Type MUST be set to 00,
      if the Option Type comes from the private range.

   *  The third-highest-order bit of the Option Type MUST be set to 0.

   *  References to the Hop-by-Hop Options header and the Destination
      Options header are removed.

2.2.2.2.  EESP Extension header options

   EESP Options carry a variable number of type-length-value (TLV)
   encoded "options", of the following format:

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -
   |  Option Type  |  Opt Data Len |  Option Data
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -

                    Figure 4: EESP Header Option Format

   *  Option Type: 8-bit identifier of the type of option.

   *  Opt Data Len: 8-bit unsigned integer.  Length of the Option Data
      field of this option, in octets.

   *  Option Data: Variable-length field.  Option-Type-specific data.






Klassert, et al.          Expires 20 March 2025                [Page 10]

Internet-Draft                    EESP                    September 2024


   The sequence of options within a header must be processed strictly in
   the order they appear in the header; a receiver must not, for
   example, scan through the header looking for a particular kind of
   option and process that option prior to processing all preceding
   ones.

2.2.3.  Host Header

   Following the Base Header and Options is the Host Header for e.g.
   optional Sequence Number.  When persent it is full 64bit sequence
   number.  EESP only support 64bit sequence numbers, a.k.a ESN and
   transmits the entire sequence number on each packet.

2.2.4.  Sequence Number

   This unsigned 64-bit field contains a counter value that increases by
   for each packet sent, i.e., a per-SA packet sequence number.  For a
   unicast SA or a single-sender multicast SA, the sender MUST increment
   this field for every transmitted packet.  The sequence number MUST
   strictly monotonic increase, sequence numbers MUST not repeat and
   MUST not cycle for any given SA.  Thus, the sender's counter and the
   receiver's counter MUST be reset (by establishing a new SA and thus a
   new key) prior to the transmission of the 2^64nd packet on an SA.
   Implementations that do replay protection SHOULD increase the
   sequence number by one for each send packet.  Even if recommended to
   increase the sequence number by one, implementatins MAY employ other
   methods to increase the sequence number, as long as the
   aforementioned requirements are met.  Sharing an SA among multiple
   senders is permitted, though generally not recommended.  EESP
   provides no means of synchronizing packet counters among multiple
   senders or meaningfully managing a receiver packet counter and window
   in the context of multiple senders.  Unless any future Option
   defining this for a multi-sender SA, the anti-replay features of ESP
   are not available.

   The field is mandatory and MUST always be present even if the
   receiver does not elect to enable the anti-replay service for a
   specific SA.  Processing of the Sequence Number field is at the
   discretion of the receiver, but all ESP implementations MUST be
   capable of performing the processing described in Sections 3.3.3 and
   3.4.3.  Thus, the sender MUST always transmit this field, but the
   receiver need not act upon it.

   AA Note

   *  *AA Note:* [RFC4303] Section 2.2 stipulate:





Klassert, et al.          Expires 20 March 2025                [Page 11]

Internet-Draft                    EESP                    September 2024


   The sender's counter and the receiver's counter are initialized to 0
   when an SA is established.  (The first packet sent using a given SA
   should have a sequence number of 1).

   *  *AA Note:* [RFC9347] Section 2.2.3 While ESP guarantees an

   increasing sequence number with subsequently sent packets, it does
   not actually require the sequence numbers to be generated
   consecutively (e.g., sending only even-numbered sequence numbers
   would be allowed, as long as they are always increasing).  Gaps in
   the sequence numbers will not work for this document, so the sequence
   number stream MUST increase monotonically by 1 for each subsequent
   packet.

2.2.5.  Initialization Vector

   If the algorithm used to encrypt the payload requires cryptographic
   synchronization data, e.g., an Initialization Vector (IV), then this
   data is carried explicitly in front of the encrypted part of the
   packet in the Crypto Header.  Any encryption algorithm that requires
   such explicit, per-packet synchronization data MUST indicate the
   length, any structure for such data, and the location of this data as
   part of an RFC specifying how the algorithm is used with EESP.
   (Typically, the IV immediately precedes the ciphertext.  See Table 1)
   If such synchronization data is implicit, the algorithm for deriving
   the data MUST be part of the algorithm definition RFC.  (If included,
   cryptographic synchronization data, e.g., an Initialization Vector
   (IV), usually is not encrypted per se (see Table 1), although it
   sometimes is referred to as being part of the ciphertext.)

   Counter mode algorithms SHOULD encode the 64-bit counter of the
   Initialization Vector (IV) on the Sequence number Field.  This option
   saves 8 header bytes on each packet.  Whether or not this option is
   selected is determined as part of Security Association (SA)
   establishment.

2.3.  Payload Info Header

2.3.1.  Next Header

   The Next Header is a, 8-bit field that identifies the type of data
   contained in the Payload Data field, e.g., a next layer header and
   data.  The value of this field is chosen from the set of IP Protocol
   Numbers defined on the web page of the IANA, e.g., a value of 6
   indicates TCP and a value of 17 indicates UDP.

   *  *AA Note:* When there is Crypto Header/PSP and say transport mode
      would



Klassert, et al.          Expires 20 March 2025                [Page 12]

Internet-Draft                    EESP                    September 2024


   there be two " Next Header fields"

2.3.2.  Pad Length

   The Pad Length field indicates the number of pad bytes immediately
   preceding it in the Padding field.  The range of valid values is 0 to
   255, where a value of zero indicates that no Padding bytes are
   present.

2.4.  Padding (for Encryption)

   TBD

2.5.  Integrity Check Value (ICV)

   Integrity Check Value is handled as in [RFC4303].

3.  UDP Encapsulation

   TBD

4.  Enhanced Encapsulating Security Protocol Processing

   TBD

5.  EESP Option Types

   This document defines two padding options to align following headers
   to their natural protocol alignment and one option defining the
   Pretty Security Protocol (PSP).  Future documents can define furter
   options.  Appendix A of [RFC8200] contains applicable formatting
   guidelines for designing new options.

5.1.  EESP Flow Identifier Option

   Flow Identifier Options are constructed as described in
   Section 2.2.2.2.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Option Type  | Option Length |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   ~                    Flow Identifier (FID)                      ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+




Klassert, et al.          Expires 20 March 2025                [Page 13]

Internet-Draft                    EESP                    September 2024


                      Figure 5: Flow Identifier Option

   *  Option Type - 8 bits: See Section 2.2.2.2

   *  Option Length - 8 bits: See Section 2.2.2.2

   *  FID: Variable length, MUST carry caracteristic infromation of the
      inner flow i.e. MUST not change within a gives SA.

5.2.  EESP Crypt Offset Option

   This option is typically used for within one Datacenter use case such
   as [PSP].

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Option Type  | Option Length |NextHeader     |CryptOffset|Flags|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            Figure 6: PSP Option

   *  Option Type - 8 bits: See Section 2.2.2.2

   *  Option Length - 8 bits: See Section 2.2.2.2

   *  Next Header - 8 bits: MUST be set to 59, [RFC8200] Section 4.7
      when CryptOffset is zero, and MUST be set to the Next Header value
      of the inner packet.  For the use of intermediate routers.

   *  CryptOffset - 6 bits: The offset from the end of the IV to the
      start of the encrypted portion of the packet, measured in 4 octet
      units.  The resulting value MUST NOT be larger than the size of
      the inner packet.  A zero CryptOffset means that the complete
      packet is authenticated and encrypted.  A positive CryptOffset
      means that the first 'CryptOffset * 4' octets of the inner packet
      belong to the AAD but are not encrypted.  In this case the Next
      Header field MUST be the same as the Next Header field in the ESP
      trailer, so that the Header can be parsed by intermediate devices.
      (Authors note: This is to preserve the original WESP use-case and
      because PSP uses this too.  In case the Flow Identifier Options
      can carry enough information about inner flows, we can remove the
      cryptoffset.)

   *  Flags - 2 bits: TBD : Used for inline crypto signlaing such as s d
      bit in PSP specification





Klassert, et al.          Expires 20 March 2025                [Page 14]

Internet-Draft                    EESP                    September 2024


6.  IKEv2 Negotiation

   TBD

7.  IANA Considerations

7.1.  IP Protocol Number

   This document requests IANA place a reference to this document to the
   Reserved value 0x0 in the IP protocol version number space.

   Note: Maybe we don't need this, because we know if this is transport
   or tunnel mode...

7.2.  EESP Protocol Number

   This document requests IANA allocate an IP protocol number from
   "Protocol Numbers - Assigned Internet Protocol Numbers" registry

   *  Decimal: TBD

   *  Keyword: EESP

   *  Protocol: Enhanced Encapsulating Security Payload

   *  Reference: This document

7.3.  EESP Options Registry

   This document requests IANA to create a registry called "EESP_OPTIONS
   Type Registry" under a new category named "EESP_OPTIONS Parameters".

   *  Name: EESP Options Registry

   *  Description: EESP Base Header Options

   *  Reference: This document

   The initial content for this registry is as follows:

   Value   EESP Header Options Types          Reference
   -----   ------------------------------    ---------------
       1   Crypt Offset                      [this document]
       2   FID                               [this document]
    3-26   Unassigned                        [this document]
   27-31   Private                           [this document]

                     Figure 7: Initial Registry Values



Klassert, et al.          Expires 20 March 2025                [Page 15]

Internet-Draft                    EESP                    September 2024


8.  Implementation Status

   [Note to RFC Editor: Please remove this section and the reference to
   [RFC6982]before publication.]

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [RFC7942], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

   Authors are requested to add a note to the RFC Editor at the top of
   this section, advising the Editor to remove the entire section before
   publication, as well as the reference to [RFC7942].

9.  Security Considerations

   In this section we discuss the security properties of EESP: TBD

10.  Acknowledgments

   TBD

11.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2992]  Hopps, C., "Analysis of an Equal-Cost Multi-Path
              Algorithm", RFC 2992, DOI 10.17487/RFC2992, November 2000,
              <https://www.rfc-editor.org/info/rfc2992>.




Klassert, et al.          Expires 20 March 2025                [Page 16]

Internet-Draft                    EESP                    September 2024


   [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
              Internet Protocol", RFC 4301, DOI 10.17487/RFC4301,
              December 2005, <https://www.rfc-editor.org/info/rfc4301>.

   [RFC4303]  Kent, S., "IP Encapsulating Security Payload (ESP)",
              RFC 4303, DOI 10.17487/RFC4303, December 2005,
              <https://www.rfc-editor.org/info/rfc4303>.

   [RFC5840]  Grewal, K., Montenegro, G., and M. Bhatia, "Wrapped
              Encapsulating Security Payload (ESP) for Traffic
              Visibility", RFC 5840, DOI 10.17487/RFC5840, April 2010,
              <https://www.rfc-editor.org/info/rfc5840>.

   [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.
              Kivinen, "Internet Key Exchange Protocol Version 2
              (IKEv2)", STD 79, RFC 7296, DOI 10.17487/RFC7296, October
              2014, <https://www.rfc-editor.org/info/rfc7296>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017,
              <https://www.rfc-editor.org/info/rfc8200>.

   [RFC9347]  Hopps, C., "Aggregation and Fragmentation Mode for
              Encapsulating Security Payload (ESP) and Its Use for IP
              Traffic Flow Security (IP-TFS)", RFC 9347,
              DOI 10.17487/RFC9347, January 2023,
              <https://www.rfc-editor.org/info/rfc9347>.

12.  Informative References

   [I-D.he-ipsecme-vpn-shared-ipsecsa]
              He, Q., Pan, W., Chen, X., and B. Ding, "Shared Use of
              IPsec Tunnel in a Multi-VPN Environment", Work in
              Progress, Internet-Draft, draft-he-ipsecme-vpn-shared-
              ipsecsa-01, 8 July 2024,
              <https://datatracker.ietf.org/doc/html/draft-he-ipsecme-
              vpn-shared-ipsecsa-01>.

   [I-D.mrossberg-ipsecme-multiple-sequence-counters]
              Rossberg, M., Klassert, S., and M. Pfeiffer, "Broadening
              the Scope of Encapsulating Security Payload (ESP)
              Protocol", Work in Progress, Internet-Draft, draft-
              mrossberg-ipsecme-multiple-sequence-counters-02, 15
              February 2024, <https://datatracker.ietf.org/doc/html/
              draft-mrossberg-ipsecme-multiple-sequence-counters-02>.





Klassert, et al.          Expires 20 March 2025                [Page 17]

Internet-Draft                    EESP                    September 2024


   [I-D.ponchon-ipsecme-anti-replay-subspaces]
              Ponchon, P., Shaikh, M., Dernaika, H., Pfister, P., and G.
              Solignac, "IPsec and IKE anti-replay sequence number
              subspaces for traffic-engineered paths and multi-core
              processing", Work in Progress, Internet-Draft, draft-
              ponchon-ipsecme-anti-replay-subspaces-03, 23 October 2023,
              <https://datatracker.ietf.org/doc/html/draft-ponchon-
              ipsecme-anti-replay-subspaces-03>.

   [PSP]      Google, "PSP Architecture Specification",
              <https://github.com/google/psp/blob/main/doc/
              PSP_Arch_Spec.pdf>.

   [RFC6982]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", RFC 6982,
              DOI 10.17487/RFC6982, July 2013,
              <https://www.rfc-editor.org/info/rfc6982>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/info/rfc7942>.

Appendix A.  Additional Stuff

   TBD

Authors' Addresses

   Steffen Klassert
   secunet Security Networks AG
   Email: steffen.klassert@secunet.com


   Christian Hopps
   LabN Consulting, L.L.C.
   Email: chopps@chopps.org


   Antony Antony
   secunet Security Networks AG
   Email: antony.antony@secunet.com









Klassert, et al.          Expires 20 March 2025                [Page 18]
